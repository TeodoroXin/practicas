import 'package:flutter/material.dart';

import 'package:record/record.dart';
import 'package:audioplayers/audioplayers.dart';

void main() => runApp(const Home());

class Home extends StatefulWidget {
  const Home({super.key});

  @override
  State<Home> createState() => _HomeState();
}

class _HomeState extends State<Home> {
  late final AudioRecorder record;
  late final AudioPlayer player;
  bool isRecording = false;
  bool isPlaying = false;
  String audioPath = '';

  @override
  void initState() {
    player = AudioPlayer();
    record = AudioRecorder();
    super.initState();
  }

  @override
  void dispose() {
    player.dispose();
    record.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Material App',
      home: Scaffold(
        appBar: AppBar(
          title: const Text('Material App Bar'),
        ),
        body: Center(
            child: Column(
          children: [
            if (isRecording)
              const Text(
                'Recording',
                style: TextStyle(fontSize: 20),
              )
            else
              const Text(
                '',
              ),

              ElevatedButton(
                onPressed: startRecording,
                child: const Text('Start Record'),
              ),

              ElevatedButton(
                onPressed: stopRecord,
                child: const Text('Stop Record'),
              ),

            const SizedBox(
              height: 20,
            ),

            ElevatedButton(
              onPressed: () => record.dispose(),
              child: const Text('Cancel Record'),
            ),

            const SizedBox(
              height: 25,
            ),
            // if(!isRecording && audioPath != null)
            if (!isRecording)
              ElevatedButton(
                  onPressed: playRecord, child: const Text('Play Record'))
          ],
        )),
      ),
    );
  }

  Future<void> startRecording() async {
    try {
      if(await record.hasPermission()){

        if (isRecording == false) {
          record.start(const RecordConfig(), path: audioPath);
          setState(() {
            isRecording = true;
          });
        }

      }
    } catch (e) {
      print('Error Start Recording: $e');
    }
  }

  Future<void> stopRecording() async {
    try {
      String? path = await (record.stop());
      setState(() {
        isRecording = false;
        audioPath = path!;
      });
    } catch (e) {
      print('Error Stopping Recording: $e');
    }
  }

  Future<void> playRecord() async {
    try {
      Source urlSource = UrlSource(audioPath);
      await player.play(urlSource);
      setState(() {
        isPlaying = true;
      });
    } catch (e) {
      print('Error Playing Record: $e');
    }
  }

  Future<void> stopRecord() async {
    try {
      await (player.stop());
      setState(() {
        isPlaying = false;
      });
    } catch (e) {
      print('Error Stopping Playing: $e');
    }
  }

}
